-----------------------------------solving using dp without lcs------------------------------------------------------------------
int minDel(int ind1,int ind2,string&w1,string&w2,vector<vector<int>>&dp)
    {   
        //base case
        if(ind1<0 ||ind2<0)return max(ind1+1,ind2+1);
        //if both are same
        if(dp[ind1][ind2]!=-1)return dp[ind1][ind2];
        if(w1[ind1]==w2[ind2])return minDel(ind1-1,ind2-1,w1,w2,dp);
        //if both are different
        int d1=1+minDel(ind1-1,ind2,w1,w2,dp);
        int d2=1+minDel(ind1,ind2-1,w1,w2,dp);
        return dp[ind1][ind2]=min(d1,d2);
    }
    int minDistance(string word1, string word2) {
        vector<vector<int>>dp(word1.size(),vector<int>(word2.size(),-1));
        return minDel(word1.size()-1,word2.size()-1,word1,word2,dp);
    }
--------------------------------------------------------------------------------------------------------------------------------------
we can solve this using lcs by:
                               total lenght of 2 string -2*LCS
