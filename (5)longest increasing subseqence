--------------------------------------------------------------------------------
 int solve (int ind,int pre,vector<int>&nums)
    {
        if(ind==nums.size())return 0;
        int take=0,notTake=0;
        if(pre==-1||pre<nums[ind])take= 1+solve(ind+1,ind,nums);
        notTake=solve(ind+1,pre,nums);
        return max(take,notTake);
    }
    int lengthOfLIS(vector<int>& nums) {
       return  solve(0,-1,nums);
    }
---------------------------------dp--(coordinate change is required)-------------------------------------------
   int solve (int ind,int pre,vector<int>&nums, vector<vector<int>>&dp)
    {
        if(ind==nums.size())return 0;
        if(dp[ind][pre+1]!=-1)return dp[ind][pre+1];
        int take=0,notTake=0;
        if(pre==-1||nums[pre]<nums[ind])take= 1+solve(ind+1,ind,nums,dp);
        notTake=solve(ind+1,pre,nums,dp);
        return dp[ind][pre+1]=max(take,notTake);

    }
    int lengthOfLIS(vector<int>& nums) {
        vector<vector<int>>dp(nums.size(),vector<int>(nums.size()+1,-1));
       return  solve(0,-1,nums,dp);
    }
------------------------------------------using binary search-------------------------------------------------------
 void binarySearch(int num,vector<int>&v)
    {
        int s=0,e=v.size()-1;
        while(s<=e)
        {
            int mid=(s+e)/2;
            if(v[mid]>num)e=mid-1;
            else s=mid+1;
        }
        auto it = lower_bound(v.begin(), v.end(), num); // Find the index of the first 
        *it=num;
    }
    int lengthOfLIS(vector<int>& nums) {
       vector<int>v;
       for(int i=0;i<nums.size();i++)
       {
           if(i==0)
           {v.push_back(nums[i]);continue;}
           else if(nums[i]>v[v.size()-1])v.push_back(nums[i]);
           else binarySearch(nums[i],v);
       }
       return v.size();
    }
------------------------------------------------------dp--------------------------------------------------------
   vector<int>v(nums.size(),1);
        for(int i=1;i<nums.size();i++){
            for(int j=0;j<i;j++)
            {   if(nums[i]<=nums[j])continue;
               else  v[i]=max(v[i],v[j]+1);
            }
        }
        int maxi=INT_MIN;
        for(int i=0;i<nums.size();i++)maxi=max(maxi,v[i]);
        return maxi;
--------------------------------------------------------------------------------------------------------------------
