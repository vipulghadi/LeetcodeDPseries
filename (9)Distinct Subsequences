-------------------------recursive solution---------------------------------------------------------
int f(int i,int j,string &s,string &t)
    {   if(j<0)return 1;
        if(i<0)return 0;
        if(s[i]==t[j]){
            int take=f(i-1,j-1,s,t);
            int notTake=f(i-1,j,s,t);
            return (take+notTake);
        }
         else  return f(i-1,j,s,t);
        
    }
    int numDistinct(string s, string t) {
        return f(s.size()-1,t.size()-1,s,t);
    }
---------------------------------recursive dp ------------------------------------------------------
int f(int i,int j,string &s,string &t,vector<vector<int>>&dp)
    {   if(j<0)return 1;
        if(i<0)return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        if(s[i]==t[j]){
            int take=f(i-1,j-1,s,t,dp);
            int notTake=f(i-1,j,s,t,dp);
            return dp[i][j]=(take+notTake);
        }
         else  return  dp[i][j]=f(i-1,j,s,t,dp);
        
    }
    int numDistinct(string s, string t) {
        vector<vector<int>>dp(s.size(),vector<int>(t.size(),-1));
        return f(s.size()-1,t.size()-1,s,t,dp);
    }
---------------------------------------------iterative approach-------------------------------------------------------------
int m=s.size()+1;
        int n=t.size()+1;
        vector<vector<double>>dp(n,vector<double>(m,0));
        for(int i=0;i<m;i++)dp[0][i]=1;
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                if(s[j-1]==t[i-1])dp[i][j]=dp[i-1][j-1]+dp[i][j-1];
                else dp[i][j]=dp[i][j-1];
            }
        }
        return (int)dp[n-1][m-1];
-----------------------------------------space optimization----------------------------------------------------------------
int m=s.size()+1;
        int n=t.size()+1;
        vector<double>pre(m,1);
        vector<double>cur(m,0);
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){

                if(s[j-1]==t[i-1])cur[j]=pre[j-1]+cur[j-1];
                else cur[j]=cur[j-1];
            }
            pre=cur;
        }
        return (int)pre[m-1];
----------------------------------------------------------------------------------------------------------------
