----------------------this code will give correct output but consumes all stack memory and cant pass all testcases---------------------
string minSizeString(int ind1,int ind2,string&str1,string&str2,string ans)
    {
        //base case
        if(ind1<0||ind2<0){
            if(ind1<0)for(int i=ind2;i>=0;i--)ans+=str2[i];
            if(ind2<0)for(int i=ind1;i>=0;i--)ans+=str1[i];
            return ans;
        }
        //both same
        if(str1[ind1]==str2[ind2]){ans+=str1[ind1];
        return minSizeString(ind1-1,ind2-1,str1,str2,ans);
        }
        //if different
        ans+=str1[ind1];
        string a= minSizeString(ind1-1,ind2,str1,str2,ans);
        ans.pop_back();
        ans+=str2[ind2];
        string b= minSizeString(ind1,ind2-1,str1,str2,ans);
        ans.pop_back();
        return a.size()>b.size()?b:a;

    }
    string shortestCommonSupersequence(string str1, string str2) {
        string ans="";
        ans=minSizeString(str1.size()-1,str2.size()-1,str1,str2,ans);
        reverse(ans.begin(),ans.end());
        return ans;
    }
-----------------------------------------------------------------------------------------------------
int n=s1.size(); 
        int m=s2.size();
        int t[n+1][m+1]; //table generated while computing LCS length
        string res; // result	
        // compute LCS length using tabulation      
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            if(i==0||j==0)
                t[i][j]=0;
            else if(s1[i-1]==s2[j-1])
            {
                t[i][j]=1+t[i-1][j-1];
            }
            else
            {
                t[i][j]=max(t[i-1][j],t[i][j-1]);
            }
        }
    }     
       //print lcs
    int i=n,j=m;
    while(i>0 && j>0)
    {
        if(s1[i-1]==s2[j-1])
        {
            res.push_back(s1[i-1]);
            i--;
            j--;
        }
        else
        {
            if(t[i-1][j]>t[i][j-1])
            {
                res.push_back(s1[i-1]);
                i--;
            } else{
                res.push_back(s2[j-1]);
                j--;
            }
        }
    }
    while(i>0) // if s1 characters are still left
    {
        res.push_back(s1[i-1]);
        i--;
    }
    while(j>0) //if s2 characters are still left
    {
        res.push_back(s2[j-1]);
        j--;
        
    }
        reverse(res.begin(),res.end()); 
        return res;
    }
--------------------------------------------------------------------------------------------------------------
