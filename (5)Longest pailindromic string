------------------------------------------------recursive solutioin------------------------------------------------
if(l==r) return 1;
        if(l>r) return 0;  //happens after "aa" 
        return s[l]==s[r] ? 2 + longestPalindromeSubseq(l+1,r-1, s) : 
            max(longestPalindromeSubseq(l+1,r, s),longestPalindromeSubseq(l,r-1, s)); 
    }
    int longestPalindromeSubseq(string s) {
       return longestPalindromeSubseq(0,s.size()-1,s); 
-----------------------------------------------------------------------------------------------------------------------
string rev="";
        for(int i=s.size()-1;i>=0;i--) rev=rev+s[i];
        int n=s.size();
        vector<int>pre(n+1,0);
        vector<int>cur(n+1,0);
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(s[i-1]==rev[j-1])cur[j]=1+pre[j-1];
                else cur[j]=max(pre[j],cur[j-1]);
            }
            swap(cur,pre);
        }
        return pre[n];
-----------------------------------------------------------------------------------------
