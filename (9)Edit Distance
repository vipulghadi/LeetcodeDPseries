--------------------------------------dp solution with recursion -------------------------------------------------------------------------------------------
int minOpe(int ind1,int ind2,string &word1,string&word2,vector<vector<int>>&dp)
    {
        //base case
        if(ind1<0)return ind2+1;
        if(ind2<0)return ind1+1;
        //if same
        if(dp[ind1][ind2]!=-1)return dp[ind1][ind2];
        if(word1[ind1]==word2[ind2])return minOpe(ind1-1,ind2-1,word1,word2,dp);
         //if notSame
        else{
            int insert=1+minOpe(ind1,ind2-1,word1,word2,dp);
            int del=1+minOpe(ind1-1,ind2,word1,word2,dp);
            int replace=1+minOpe(ind1-1,ind2-1,word1,word2,dp);
            return dp[ind1][ind2]=min(insert,min(del,replace));
        }
    }
    int minDistance(string word1, string word2) {
       vector<vector<int>>dp(word1.size(),vector<int>(word2.size(),-1));
        return minOpe(word1.size()-1,word2.size()-1,word1,word2,dp);
    }
--------------------------------------------------------------------------------------------------------------------------------------
