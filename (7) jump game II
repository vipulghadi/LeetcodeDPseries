-------------------------------tabulation approach---------------------------------------------------------
int jump(vector<int>& nums) {
        vector<int>dp(nums.size(),0);
        dp[nums.size()-1]=0;
        for(int i=nums.size()-2;i>=0;i--){
                int maxReach=nums[i];
                int mini=nums.size()-1;
                for(int k=i+1;k<=i+maxReach;k++)if(k<nums.size()) mini=min(mini,dp[k]);
                dp[i]=1+mini;
        }
        return dp[0];
    }
-------------------------------------using dp with recursion----------------------------------------------------
 int solve(int ind,vector<int>& nums, vector<int>&dp)
    {
        if(ind>=nums.size()-1)return 0;
        int jumps=nums[ind];
        if(dp[ind]!=-1)return dp[ind];
        int mini=nums.size();
        for(int i=ind+1;i<=(ind+jumps)&& i<nums.size();i++) mini=min(1+solve(i,nums,dp),mini);
        return dp[ind]=mini;
    }
    int jump(vector<int>& nums) {
        vector<int>dp(nums.size(),-1);
        return solve(0,nums,dp);
    }
-------------------------------------------greedy approach IMP----------------------------------------------------------------------
    int jump(vector<int>& nums) {
      int j=0,cur=0,farthest=0;
      for(int i=0;i<nums.size()-1;i++){
          farthest=max(farthest,nums[i]+i);
          if(i==cur){
              cur=farthest;
              j++;
          }
      }
      return j;
      
    }
-----------------------------------------------------------------------------------
